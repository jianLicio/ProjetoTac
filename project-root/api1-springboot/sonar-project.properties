name: SonarCloud
on:
  push:
    branches:
      - jian
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=jianLicio_ProjetoTac





# Identificador único para o projeto no SonarQube
# sonar.projectKey=jianLicio_ProjetoTac
# sonar.organization=jianlicio
# sonar.host.url=https://sonarcloud.io
# sonar.sources=src/main/java
# sonar.language=java
# sonar.sourceEncoding=UTF-8

# sonar.host.url=http://localhost:9000

# Token de autenticação para o SonarQube
# sonar.token=${SONAR_TOKEN}
# sonar.host.url=${SONAR_HOST_URL}

# Nome do projeto que será exibido no SonarQube
# sonar.projectName=ProjetoTac

# # Versão do projeto
# sonar.projectVersion=1.0

# # Diretórios de código-fonte e testes
# sonar.sources=api1-springboot/projeto_t_a_c/src/main/java,api2-express/projeto_express
# sonar.tests=api1-springboot/projeto_t_a_c/src/test,api2-express/projeto_express/teste
# # Diretório onde os relatórios de cobertura de teste estão localizados (Jacoco XML report)
# sonar.coverage.jacoco.xmlReportPaths=api1-springboot/projeto_t_a_c/target/site/jacoco/jacoco.xml

# # Excluir arquivos duplicados de indexação
# sonar.test.inclusions=api2-express/projeto_express/teste/**/*.js
# sonar.exclusions=api2-express/projeto_express/teste/auth.http

# # sonar.java.binaries=target/classes

# sonar.java.binaries=api1-springboot/projeto_t_a_c/target/classes
# sonar.java.test.binaries=api1-springboot/projeto_t_a_c/target/test-classes

# sonar.web.javaOpts=-Xmx1024m -Xms512m -XX:+HeapDumpOnOutOfMemoryError

