pipeline {
    agent {
        docker {
            image 'maven:3.9.5-openjdk-17'
            args '-v /var/run/docker.sock:/var/run/docker.sock -v /workspace:/workspace'
        }
    }

    environment {
        // Defina variáveis de ambiente se necessário
    }

    stages {
        stage('Load Environment') {
            steps {
                script {
                    // Carregar o arquivo .env e definir as variáveis de ambiente
                    def envFile = readFile('/workspace/.env')  // Ajustado para caminho correto
                    def envVars = envFile.split('\n')
                    envVars.each { line ->
                        def parts = line.split('=')
                        if (parts.length == 2) {
                            def key = parts[0].trim()
                            def value = parts[1].trim()
                            env[key] = value
                        }
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    docker.image('maven:3.9.5-openjdk-17').inside('-v /var/run/docker.sock:/var/run/docker.sock -v /workspace:/workspace') {
                        // Verificar a versão do Maven
                        sh 'mvn --version'

                        // Compilar e empacotar o projeto
                        sh 'cd /workspace && mvn package -Dmaven.test.skip=true'
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    docker.image('maven:3.9.5-openjdk-17').inside('-v /var/run/docker.sock:/var/run/docker.sock -v /workspace:/workspace') {
                         sh '''#!/bin/bash
                            curl -H "Authorization: Bearer ${JWT_TOKEN}" \
                            -X POST https://api.example.com/test
                        '''
                        
                        // Executar os testes
                        sh 'cd /workspace && mvn test'
                    }
                }
            }
        }
    }
}
// pipeline {
//     agent any

//     stages {
//         stage('Load Environment') {
//             steps {
//                 script {
//                     // Carregar o arquivo .env e definir as variáveis de ambiente
//                     def envFile = readFile('.env')
//                     def envVars = envFile.split('\n')
//                     envVars.each { line ->
//                         def parts = line.split('=')
//                         if (parts.length == 2) {
//                             def key = parts[0].trim()
//                             def value = parts[1].trim()
//                             env[key] = value
//                         }
//                     }
//                 }
//             }
//         }
//         stage('Build') {
//             steps {
//                 script {
//                     def mavenImage = 'maven:3.9.5-openjdk-17'
                    
//                     docker.image(mavenImage).inside('-v /var/run/docker.sock:/var/run/docker.sock') {
//                         // Verificar a versão do Maven
//                         sh 'mvn --version'

//                         // Compilar e empacotar o projeto
//                         sh 'mvn package -Dmaven.test.skip=true'
//                     }
//                 }
//             }
//         }
//         stage('Test') {
//             steps {
//                 script {
//                     def mavenImage = 'maven:3.9.5-openjdk-17'
                    
//                     docker.image(mavenImage).inside('-v /var/run/docker.sock:/var/run/docker.sock') {
//                         // Utilizar o JWT para autenticar a API
//                         sh '''#!/bin/bash
//                             curl -H "Authorization: Bearer ${JWT_TOKEN}" \
//                             -X POST https://api.example.com/test
//                         '''

//                         // Executar os testes do projeto
//                         sh 'mvn clean install'
//                     }
//                 }
//             }
//         }
//     }
// }